from requests_html import HTML, HTMLSession # <- HTML is unused
import os


def pdf_link_scraper(): # functions are better called as verbs, maybe a `get_pdf_links`?
    """this function scrapes CIA web-page with
    one-page summaries of the countries
    """

    # things to add to a function's docstring are params if any (not in this case)
    # and what the function returns - that was not from the function name or docstring here
    # words like `this function` can be omitted

    links = {}
    cia_page = "https://www.cia.gov/library/publications/resources/the-world-factbook/docs/one_page_summaries.html"

    session = HTMLSession()
    source = session.get(cia_page).html  # downloading page as html

    # finding all blocks containing country name and link to onepage summary
    country_data = source.find("div.country-name")

    for country in country_data:
        # add contry name as a key and link to pdf summary as a value to dictionary for each country
        links[country.text] = list(country.absolute_links)[0]

    return links  # returning resulting dictionary


def download_pdf(links):
    """this function takes list of links, generated by pdf_link_scraper()
    creates folder "pdf" and downloads one-page summaries for each country
    """

    if not os.path.exists("pdf"):
        os.mkdir("pdf")

    # we take dictionary resulting from the previous function
    for country, link in links.items():

        # isn't it possible to download pdfs as files directly?

        # create filename for a pdf using keys from dictionary
        file_name = country + ".pdf"
        file_path = os.path.join("pdf", file_name)  # create path for downloading pdf

        with open(file_path, "wb") as pdf_file:  # downloading pdf file
            r = HTMLSession().get(link)
            pdf_file.write(r.content)

    print("Finished downloading all PDFs")


# it would be useful to have an if-main script runner here
# in case you just one to download the pdfs and not execute any more steps
